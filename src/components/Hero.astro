---
import { Image } from 'astro:assets';
import Link from "@/components/Link.astro";
import AnimeService from "@/lib/animeService";

const animes = await AnimeService.get({
  size: 10,
  filters: {
    has_background_image: true
  }
});

---

<section class="w-full h-screen">
  <div class="w-full h-full relative">
    <div class="absolute bottom-5 sm:bottom-auto sm:top-1/2 left-0 z-10 transform sm:-translate-y-1/2">
      <div class="flex flex-col p-8 sm:max-w-110">
        <h1 class="text-5xl sm:text-6xl text-white font-bold mb-8">Welcome to AnimeList</h1>
        <p class="text-base text-zinc-200 font-medium mb-4">
          Browse through thousands of anime titles and start building your
          personal watchlist today.
        </p>
        <div class="flex min-w-35 max-w-1/2">
          <Link href="login">Start Now</Link>
        </div>
      </div>
    </div>
    <div class="w-full h-full relative">
      {
        animes.map((anime, i) => (
          <Image
            src={anime.background_image_src || ""}
            alt={anime.title || "Image"}
            width={1920}
            height={762}
            loading="lazy"
            class="hero-image object-cover z-1 h-full w-full"
          />
        ))
      }
      <div
        class="hidden sm:block absolute top-0 left-0 z-2 h-full min-w-140 w-1/2 bg-gradient-to-r from-black/95 via-black/80 to-transparent pointer-events-none"
      >
      </div>
      <div
        class="absolute bottom-0 z-2 left-0 w-full h-full md:h-24 bg-gradient-to-t from-black/90 via-black/50 to-transparent pointer-events-none"
      >
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from "gsap";

  document.addEventListener("astro:page-load", () => {
    const images = gsap.utils.toArray(".hero-image");
    let current = 0;
    const duration = 1;
    const interval = 4000;

    images.forEach((img, i) => {
      if (!img) return;
      gsap.set(img, {
        autoAlpha: i === 0 ? 1 : 0,
        zIndex: i === 0 ? 1 : 0,
        position: "absolute",
        top: 0,
        left: 0,
      });
    });

    setInterval(() => {
      const currentImage = images[current];
      const nextIndex = (current + 1) % images.length;
      const nextImage = images[nextIndex];

      if (!currentImage || !nextImage) return;

      gsap.to(currentImage, {
        autoAlpha: 0,
        duration,
        onStart: () => (currentImage.style.zIndex = 0),
      });

      gsap.to(nextImage, {
        autoAlpha: 1,
        duration,
        onStart: () => (nextImage.style.zIndex = 1),
      });

      current = nextIndex;
    }, interval);
  });
</script>
